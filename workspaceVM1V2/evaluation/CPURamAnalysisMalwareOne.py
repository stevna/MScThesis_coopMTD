import psutil
import time
import subprocess
import socket

ip = '192.168.1.10'
port = 9999
tries = 0
fails = 0
failTime = 0
startTime = time.time()
count = 0
lastWorked = 0
lastNotWorked = 0

proc = subprocess.Popen(["/bin/bash", "/home/MalwareOne/workspace/evaluation/stopTimeOfClient.sh"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
proc = subprocess.Popen(["/bin/bash", "/home/MalwareOne/workspace/evaluation/sendPacketsToServer.sh"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)


# to clean the fiel
with open("/home/MalwareOne/workspace/evaluation/CPURamAnalysisMalwareOne.txt", "w") as file:
    pass

# check if process is running
def checkProc(proc_name):
    for proc in psutil.process_iter():
        try:
            if proc_name.lower() == proc.name().lower():
                #print(proc_name.lower())
                #print(proc.name().lower())
                return True
        except psutil.NoSuchProcess:
            pass
    return False


def IPDisruption(file, port, tries, fails,startTime):
    global lastWorked
    global lastNotWorked
    global failTime
    try:
        socket.create_connection((ip, port), timeout=1)
        file.write("True\n")
    except OSError:
        fails += 1
        file.write("False\n")
        
    tries += 1
    

while True:
    with open("/home/MalwareOne/workspace/evaluation/CPURamAnalysisMalwareOne.txt", "a") as file:
        if count == 0:
            file.write("time,")
            file.write("CPUPerc,")
            file.write("RAMPerc,")
            file.write("RAMAvailable,")
            file.write("RAMTotal,")
            file.write("BashliteActive,")
            file.write("IPConnectionPossible\n")
            
        
        file.write(time.strftime("%H:%M:%S")+",")
        file.write(f"{psutil.cpu_percent(1)},")
        file.write(f"{psutil.virtual_memory().percent},")
        file.write(f"{psutil.virtual_memory().available},")
        file.write(f"{psutil.virtual_memory().total},")
        if(checkProc("clientStartScanner")):
            file.write("True\n")
        else:
            file.write("False\n")
        #not really needed anymore because I handle that with Bash
        #IPDisruption(file, port, tries, fails,startTime)
        count+=1
    
    #print("sleep")    
    time.sleep(1)

